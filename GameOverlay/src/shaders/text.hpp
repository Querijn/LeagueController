#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input C:\Users\queri\OneDrive\Projects\LeagueController\GameOverlay\/shaders/text.glsl --output C:\Users\queri\OneDrive\Projects\LeagueController\GameOverlay\/src/shaders/text.hpp --slang glsl330:glsl300es:hlsl5:glsl100

    Overview:

        Shader program 'text':
            Get shader desc: text_shader_desc(sg_query_backend());
            Vertex shader: TextVertexShader
                Attribute slots:
                    ATTR_TextVertexShader_Positions = 0
                    ATTR_TextVertexShader_UVs = 1
                Uniform block 'TextVertexParams':
                    C struct: TextVertexParams_t
                    Bind slot: SLOT_TextVertexParams = 0
            Fragment shader: TextFragmentShader
                Uniform block 'TextFragmentParams':
                    C struct: TextFragmentParams_t
                    Bind slot: SLOT_TextFragmentParams = 0
                Image 'Diffuse':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_Diffuse = 0


    Shader descriptor structs:

        sg_shader text = sg_make_shader(text_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'TextVertexShader':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_TextVertexShader_Positions] = { ... },
                    [ATTR_TextVertexShader_UVs] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_Diffuse = 0;

    Bind slot and C-struct for uniform block 'TextVertexParams':

        TextVertexParams_t TextVertexParams = {
            .MVP = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_TextVertexParams, &SG_RANGE(TextVertexParams));

    Bind slot and C-struct for uniform block 'TextFragmentParams':

        TextFragmentParams_t TextFragmentParams = {
            .Color = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_TextFragmentParams, &SG_RANGE(TextFragmentParams));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_TextVertexShader_Positions (0)
#define ATTR_TextVertexShader_UVs (1)
#define SLOT_Diffuse (0)
#define SLOT_TextVertexParams (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct TextVertexParams_t {
    glm::mat4 MVP;
} TextVertexParams_t;
#pragma pack(pop)
#define SLOT_TextFragmentParams (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct TextFragmentParams_t {
    glm::vec4 Color;
} TextFragmentParams_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 TextVertexParams[4];
    layout(location = 0) in vec2 Positions;
    out vec2 UV;
    layout(location = 1) in vec2 UVs;
    
    void main()
    {
        gl_Position = mat4(TextVertexParams[0], TextVertexParams[1], TextVertexParams[2], TextVertexParams[3]) * vec4(Positions, 0.0, 1.0);
        UV = UVs;
    }
    
*/
static const char TextVertexShader_source_glsl330[304] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x54,0x65,0x78,0x74,0x56,
    0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x55,0x56,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x54,0x65,0x78,
    0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2c,0x20,0x54,0x65,0x78,0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x54,0x65,0x78,0x74,0x56,0x65,0x72,0x74,0x65,
    0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x54,0x65,0x78,0x74,
    0x56,0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,
    0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x73,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x55,0x56,0x20,0x3d,0x20,0x55,0x56,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    #version 330
    
    uniform vec4 TextFragmentParams[1];
    uniform sampler2D Diffuse;
    
    in vec2 UV;
    layout(location = 0) out vec4 fragColor;
    
    void main()
    {
        fragColor = vec4(TextFragmentParams[0].xyz, texture(Diffuse, UV).x);
    }
    
*/
static const char TextFragmentShader_source_glsl330[223] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x54,0x65,0x78,0x74,0x46,
    0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x44,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x54,0x65,0x78,0x74,0x46,0x72,0x61,0x67,0x6d,
    0x65,0x6e,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,
    0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x44,0x69,0x66,0x66,0x75,0x73,
    0x65,0x2c,0x20,0x55,0x56,0x29,0x2e,0x78,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    
    uniform vec4 TextVertexParams[4];
    attribute vec2 Positions;
    varying vec2 UV;
    attribute vec2 UVs;
    
    void main()
    {
        gl_Position = mat4(TextVertexParams[0], TextVertexParams[1], TextVertexParams[2], TextVertexParams[3]) * vec4(Positions, 0.0, 1.0);
        UV = UVs;
    }
    
*/
static const char TextVertexShader_source_glsl100[280] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x54,0x65,0x78,0x74,0x56,
    0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,
    0x67,0x20,0x76,0x65,0x63,0x32,0x20,0x55,0x56,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,0x55,0x56,0x73,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x54,0x65,0x78,0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x54,0x65,0x78,0x74,0x56,0x65,
    0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x54,
    0x65,0x78,0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x32,0x5d,0x2c,0x20,0x54,0x65,0x78,0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x55,0x56,0x20,0x3d,0x20,0x55,
    0x56,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 TextFragmentParams[1];
    uniform highp sampler2D Diffuse;
    
    varying highp vec2 UV;
    
    void main()
    {
        gl_FragData[0] = vec4(TextFragmentParams[0].xyz, texture2D(Diffuse, UV).x);
    }
    
*/
static const char TextFragmentShader_source_glsl100[258] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x54,
    0x65,0x78,0x74,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x50,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x44,0x69,
    0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x55,0x56,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x54,0x65,0x78,0x74,0x46,0x72,0x61,0x67,
    0x6d,0x65,0x6e,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x28,0x44,0x69,0x66,
    0x66,0x75,0x73,0x65,0x2c,0x20,0x55,0x56,0x29,0x2e,0x78,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    #version 300 es
    
    uniform vec4 TextVertexParams[4];
    layout(location = 0) in vec2 Positions;
    out vec2 UV;
    layout(location = 1) in vec2 UVs;
    
    void main()
    {
        gl_Position = mat4(TextVertexParams[0], TextVertexParams[1], TextVertexParams[2], TextVertexParams[3]) * vec4(Positions, 0.0, 1.0);
        UV = UVs;
    }
    
*/
static const char TextVertexShader_source_glsl300es[307] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x54,0x65,
    0x78,0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,
    0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x32,0x20,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x55,0x56,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x54,0x65,0x78,0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x30,0x5d,0x2c,0x20,0x54,0x65,0x78,0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x54,0x65,0x78,0x74,0x56,0x65,
    0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x54,
    0x65,0x78,0x74,0x56,0x65,0x72,0x74,0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x73,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x55,0x56,0x20,0x3d,0x20,0x55,0x56,0x73,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 TextFragmentParams[1];
    uniform highp sampler2D Diffuse;
    
    in highp vec2 UV;
    layout(location = 0) out highp vec4 fragColor;
    
    void main()
    {
        fragColor = vec4(TextFragmentParams[0].xyz, texture(Diffuse, UV).x);
    }
    
*/
static const char TextFragmentShader_source_glsl300es[296] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x54,0x65,0x78,0x74,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x50,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,
    0x20,0x44,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x54,0x65,0x78,0x74,0x46,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x50,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x44,0x69,0x66,0x66,0x75,0x73,0x65,0x2c,0x20,0x55,0x56,0x29,0x2e,
    0x78,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    cbuffer TextVertexParams : register(b0)
    {
        row_major float4x4 _21_MVP : packoffset(c0);
    };
    
    
    static float4 gl_Position;
    static float2 Positions;
    static float2 UV;
    static float2 UVs;
    
    struct SPIRV_Cross_Input
    {
        float2 Positions : TEXCOORD0;
        float2 UVs : TEXCOORD1;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 UV : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    #line 18 "C:\Users\queri\OneDrive\Projects\LeagueController\GameOverlay\/shaders/text.glsl"
    void vert_main()
    {
    #line 18 "C:\Users\queri\OneDrive\Projects\LeagueController\GameOverlay\/shaders/text.glsl"
        gl_Position = mul(float4(Positions, 0.0f, 1.0f), _21_MVP);
    #line 19 "C:\Users\queri\OneDrive\Projects\LeagueController\GameOverlay\/shaders/text.glsl"
        UV = UVs;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        Positions = stage_input.Positions;
        UVs = stage_input.UVs;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.UV = UV;
        return stage_output;
    }
*/
static const char TextVertexShader_source_hlsl5[1026] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x54,0x65,0x78,0x74,0x56,0x65,0x72,0x74,
    0x65,0x78,0x50,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,
    0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,
    0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x20,0x5f,0x32,0x31,0x5f,0x4d,0x56,0x50,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x55,0x56,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x55,0x56,0x73,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x55,0x56,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x31,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x55,0x56,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,
    0x20,0x22,0x43,0x3a,0x5c,0x55,0x73,0x65,0x72,0x73,0x5c,0x71,0x75,0x65,0x72,0x69,
    0x5c,0x4f,0x6e,0x65,0x44,0x72,0x69,0x76,0x65,0x5c,0x50,0x72,0x6f,0x6a,0x65,0x63,
    0x74,0x73,0x5c,0x4c,0x65,0x61,0x67,0x75,0x65,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,
    0x6c,0x65,0x72,0x5c,0x47,0x61,0x6d,0x65,0x4f,0x76,0x65,0x72,0x6c,0x61,0x79,0x5c,
    0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x74,0x65,0x78,0x74,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,0x20,
    0x22,0x43,0x3a,0x5c,0x55,0x73,0x65,0x72,0x73,0x5c,0x71,0x75,0x65,0x72,0x69,0x5c,
    0x4f,0x6e,0x65,0x44,0x72,0x69,0x76,0x65,0x5c,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,
    0x73,0x5c,0x4c,0x65,0x61,0x67,0x75,0x65,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x6c,
    0x65,0x72,0x5c,0x47,0x61,0x6d,0x65,0x4f,0x76,0x65,0x72,0x6c,0x61,0x79,0x5c,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x74,0x65,0x78,0x74,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,
    0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x32,0x31,0x5f,0x4d,0x56,0x50,0x29,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x43,0x3a,0x5c,0x55,
    0x73,0x65,0x72,0x73,0x5c,0x71,0x75,0x65,0x72,0x69,0x5c,0x4f,0x6e,0x65,0x44,0x72,
    0x69,0x76,0x65,0x5c,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x5c,0x4c,0x65,0x61,
    0x67,0x75,0x65,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x6c,0x65,0x72,0x5c,0x47,0x61,
    0x6d,0x65,0x4f,0x76,0x65,0x72,0x6c,0x61,0x79,0x5c,0x2f,0x73,0x68,0x61,0x64,0x65,
    0x72,0x73,0x2f,0x74,0x65,0x78,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x55,0x56,0x20,0x3d,0x20,0x55,0x56,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x73,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x55,0x56,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x55,0x56,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x55,0x56,0x20,
    0x3d,0x20,0x55,0x56,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x00,
};
/*
    cbuffer TextFragmentParams : register(b0)
    {
        float4 _29_Color : packoffset(c0);
    };
    
    Texture2D<float4> Diffuse : register(t0);
    SamplerState _Diffuse_sampler : register(s0);
    
    static float2 UV;
    static float4 fragColor;
    
    struct SPIRV_Cross_Input
    {
        float2 UV : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 fragColor : SV_Target0;
    };
    
    #line 18 "C:\Users\queri\OneDrive\Projects\LeagueController\GameOverlay\/shaders/text.glsl"
    void frag_main()
    {
    #line 18 "C:\Users\queri\OneDrive\Projects\LeagueController\GameOverlay\/shaders/text.glsl"
    #line 19 "C:\Users\queri\OneDrive\Projects\LeagueController\GameOverlay\/shaders/text.glsl"
        fragColor = float4(_29_Color.xyz, Diffuse.Sample(_Diffuse_sampler, UV).x);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        UV = stage_input.UV;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.fragColor = fragColor;
        return stage_output;
    }
*/
static const char TextFragmentShader_source_hlsl5[926] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x54,0x65,0x78,0x74,0x46,0x72,0x61,0x67,
    0x6d,0x65,0x6e,0x74,0x50,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,
    0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x39,0x5f,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,
    0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,
    0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x44,0x69,0x66,0x66,0x75,0x73,0x65,
    0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,
    0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x44,
    0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,
    0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x55,0x56,
    0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,
    0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x55,0x56,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,
    0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,
    0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,
    0x38,0x20,0x22,0x43,0x3a,0x5c,0x55,0x73,0x65,0x72,0x73,0x5c,0x71,0x75,0x65,0x72,
    0x69,0x5c,0x4f,0x6e,0x65,0x44,0x72,0x69,0x76,0x65,0x5c,0x50,0x72,0x6f,0x6a,0x65,
    0x63,0x74,0x73,0x5c,0x4c,0x65,0x61,0x67,0x75,0x65,0x43,0x6f,0x6e,0x74,0x72,0x6f,
    0x6c,0x6c,0x65,0x72,0x5c,0x47,0x61,0x6d,0x65,0x4f,0x76,0x65,0x72,0x6c,0x61,0x79,
    0x5c,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x74,0x65,0x78,0x74,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,
    0x20,0x22,0x43,0x3a,0x5c,0x55,0x73,0x65,0x72,0x73,0x5c,0x71,0x75,0x65,0x72,0x69,
    0x5c,0x4f,0x6e,0x65,0x44,0x72,0x69,0x76,0x65,0x5c,0x50,0x72,0x6f,0x6a,0x65,0x63,
    0x74,0x73,0x5c,0x4c,0x65,0x61,0x67,0x75,0x65,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,
    0x6c,0x65,0x72,0x5c,0x47,0x61,0x6d,0x65,0x4f,0x76,0x65,0x72,0x6c,0x61,0x79,0x5c,
    0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x74,0x65,0x78,0x74,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x43,0x3a,
    0x5c,0x55,0x73,0x65,0x72,0x73,0x5c,0x71,0x75,0x65,0x72,0x69,0x5c,0x4f,0x6e,0x65,
    0x44,0x72,0x69,0x76,0x65,0x5c,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x5c,0x4c,
    0x65,0x61,0x67,0x75,0x65,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x6c,0x65,0x72,0x5c,
    0x47,0x61,0x6d,0x65,0x4f,0x76,0x65,0x72,0x6c,0x61,0x79,0x5c,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x73,0x2f,0x74,0x65,0x78,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x32,0x39,0x5f,0x43,0x6f,0x6c,0x6f,0x72,
    0x2e,0x78,0x79,0x7a,0x2c,0x20,0x44,0x69,0x66,0x66,0x75,0x73,0x65,0x2e,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x28,0x5f,0x44,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x55,0x56,0x29,0x2e,0x78,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x55,
    0x56,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,
    0x55,0x56,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before text.hpp"
#endif
static inline const sg_shader_desc* text_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "Positions";
      desc.attrs[1].name = "UVs";
      desc.vs.source = TextVertexShader_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "TextVertexParams";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = TextFragmentShader_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "TextFragmentParams";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "Diffuse";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "text_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "Positions";
      desc.attrs[1].name = "UVs";
      desc.vs.source = TextVertexShader_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "TextVertexParams";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = TextFragmentShader_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "TextFragmentParams";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "Diffuse";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "text_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "Positions";
      desc.attrs[1].name = "UVs";
      desc.vs.source = TextVertexShader_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "TextVertexParams";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = TextFragmentShader_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "TextFragmentParams";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "Diffuse";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "text_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.vs.source = TextVertexShader_source_hlsl5;
      desc.vs.d3d11_target = "vs_5_0";
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.source = TextFragmentShader_source_hlsl5;
      desc.fs.d3d11_target = "ps_5_0";
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.images[0].name = "Diffuse";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "text_shader";
    }
    return &desc;
  }
  return 0;
}
